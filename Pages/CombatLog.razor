@page "/combatlog"
@using TTT2StatsApi.Models;
@using System.Globalization;
@inject HttpClient client;
@using Microsoft.Extensions.Configuration;
@inject IConfiguration configuration;
@inject ILogger<CombatLog> logger;

<h3>Combat Log</h3>
<p>Most Recent First - All Times In Your Local Time</p>
<table class="pure-table pure-table-striped">
    <thead>
        <tr>
            <th>Time</th>
            <th>Attacker</th>
            <th>Victim</th>
            <th>Damage</th>
            <th>Health Remaining</th>
            <th>Weapon</th>
        </tr>
    </thead>
    <tbody>
        @if (combatLogRows != null)
        {
            @foreach (var item in combatLogRows)
            {
                <tr>
                    <td style="white-space: nowrap">@(DateTimeOffset
                        .FromUnixTimeSeconds(item.DamageTime)
                        .DateTime
                        .ToLocalTime()
                        .ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.CurrentCulture))</td>
                    <td>@item.AttackerName</td>
                    <td>@item.VictimName</td>
                    <td>@item.DamageDealt.ToRoundedString()</td>
                    <td>@item.HealthRemaining.ToRoundedString()</td>
                    <td>@item.Weapon</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<CombatLogRow>? combatLogRows = new List<CombatLogRow>();
    [CascadingParameter(Name = "ApiBaseUrl")]
    protected string apiBaseUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        logger.LogTrace("OnInitializedAsync");
        logger.LogTrace("SetBaseUrl");
        combatLogRows = (await client.GetFromJsonAsync<IEnumerable<CombatLogRow>>(apiBaseUrl + "/DamageLog"))?.OrderByDescending(clr => clr.Id)?.ToList();
    }
}
